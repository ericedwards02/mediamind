/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ListViewImport } from './routes/list-view'
import { Route as EntriesRouteImport } from './routes/entries/route'
import { Route as IndexImport } from './routes/index'
import { Route as EntriesGraphViewImport } from './routes/entries/graph-view'
import { Route as EntriesBlockViewImport } from './routes/entries/block-view'

// Create/Update Routes

const ListViewRoute = ListViewImport.update({
  id: '/list-view',
  path: '/list-view',
  getParentRoute: () => rootRoute,
} as any)

const EntriesRouteRoute = EntriesRouteImport.update({
  id: '/entries',
  path: '/entries',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EntriesGraphViewRoute = EntriesGraphViewImport.update({
  id: '/graph-view',
  path: '/graph-view',
  getParentRoute: () => EntriesRouteRoute,
} as any)

const EntriesBlockViewRoute = EntriesBlockViewImport.update({
  id: '/block-view',
  path: '/block-view',
  getParentRoute: () => EntriesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/entries': {
      id: '/entries'
      path: '/entries'
      fullPath: '/entries'
      preLoaderRoute: typeof EntriesRouteImport
      parentRoute: typeof rootRoute
    }
    '/list-view': {
      id: '/list-view'
      path: '/list-view'
      fullPath: '/list-view'
      preLoaderRoute: typeof ListViewImport
      parentRoute: typeof rootRoute
    }
    '/entries/block-view': {
      id: '/entries/block-view'
      path: '/block-view'
      fullPath: '/entries/block-view'
      preLoaderRoute: typeof EntriesBlockViewImport
      parentRoute: typeof EntriesRouteImport
    }
    '/entries/graph-view': {
      id: '/entries/graph-view'
      path: '/graph-view'
      fullPath: '/entries/graph-view'
      preLoaderRoute: typeof EntriesGraphViewImport
      parentRoute: typeof EntriesRouteImport
    }
  }
}

// Create and export the route tree

interface EntriesRouteRouteChildren {
  EntriesBlockViewRoute: typeof EntriesBlockViewRoute
  EntriesGraphViewRoute: typeof EntriesGraphViewRoute
}

const EntriesRouteRouteChildren: EntriesRouteRouteChildren = {
  EntriesBlockViewRoute: EntriesBlockViewRoute,
  EntriesGraphViewRoute: EntriesGraphViewRoute,
}

const EntriesRouteRouteWithChildren = EntriesRouteRoute._addFileChildren(
  EntriesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/entries': typeof EntriesRouteRouteWithChildren
  '/list-view': typeof ListViewRoute
  '/entries/block-view': typeof EntriesBlockViewRoute
  '/entries/graph-view': typeof EntriesGraphViewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/entries': typeof EntriesRouteRouteWithChildren
  '/list-view': typeof ListViewRoute
  '/entries/block-view': typeof EntriesBlockViewRoute
  '/entries/graph-view': typeof EntriesGraphViewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/entries': typeof EntriesRouteRouteWithChildren
  '/list-view': typeof ListViewRoute
  '/entries/block-view': typeof EntriesBlockViewRoute
  '/entries/graph-view': typeof EntriesGraphViewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/entries'
    | '/list-view'
    | '/entries/block-view'
    | '/entries/graph-view'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/entries'
    | '/list-view'
    | '/entries/block-view'
    | '/entries/graph-view'
  id:
    | '__root__'
    | '/'
    | '/entries'
    | '/list-view'
    | '/entries/block-view'
    | '/entries/graph-view'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EntriesRouteRoute: typeof EntriesRouteRouteWithChildren
  ListViewRoute: typeof ListViewRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EntriesRouteRoute: EntriesRouteRouteWithChildren,
  ListViewRoute: ListViewRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/entries",
        "/list-view"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/entries": {
      "filePath": "entries/route.tsx",
      "children": [
        "/entries/block-view",
        "/entries/graph-view"
      ]
    },
    "/list-view": {
      "filePath": "list-view.tsx"
    },
    "/entries/block-view": {
      "filePath": "entries/block-view.tsx",
      "parent": "/entries"
    },
    "/entries/graph-view": {
      "filePath": "entries/graph-view.tsx",
      "parent": "/entries"
    }
  }
}
ROUTE_MANIFEST_END */
